---
- name: "{{ hbase_task_prefix }} Create hbase group"
  ansible.builtin.group:
    name: "{{ hbase_group }}"
    state: present

- name: "{{ hbase_task_prefix }} Create hbase user"
  ansible.builtin.user:
    name: "{{ hbase_user }}"
    shell: "{{ hbase_user_shell }}"
    group: "{{ hbase_group }}"
    state: present

- name: "{{ hbase_task_prefix }} Download checksum"
  ansible.builtin.uri:
    url: "{{ hbase_download_url_checksum }}"
    return_content: true
  register: hbase_download_checksum_raw

- name: "{{ hbase_task_prefix }} Extract checksum"
  ansible.builtin.set_fact:
    hbase_download_checksum: "{{ hbase_download_checksum_raw.content.split(': ')[1] | regex_replace('\n','') | regex_replace(' ','') | lower }}"

- name: "{{ hbase_task_prefix }} Download tarball"
  ansible.builtin.get_url:
    url: "{{ hbase_download_url_file }}"
    dest: "{{ hbase_path_tarball }}"
    checksum: "{{ hbase_download_checksum_algo }}:{{ hbase_download_checksum }}"

- name: "{{ hbase_task_prefix }} Unpack tarball"
  ansible.builtin.unarchive:
    src: "{{ hbase_path_tarball }}"
    dest: "{{ hbase_path_base }}"
    remote_src: true
    creates: "{{ hbase_path_unpacked }}"

- name: "{{ hbase_task_prefix }} Copy binaries"
  ansible.builtin.copy:
    src: "{{ hbase_path_unpacked }}"
    dest: "{{ hbase_path_install }}"
    remote_src: true
    force: false

- name: "{{ hbase_task_prefix }} Download checksum"
  ansible.builtin.uri:
    url: "{{ hbase_jmx_exporter_url_checksum }}"
    return_content: true
  register: hbase_jmx_exporter_checksum

- name: "{{ hbase_task_prefix }} Download JMX exporter"
  ansible.builtin.get_url:
    url: "{{ hbase_jmx_exporter_url_file }}"
    dest: "{{ hbase_path_install }}/lib/jmx_prometheus_javaagent-{{ hbase_jmx_exporter_version }}.jar"
    checksum: "{{ hbase_jmx_exporter_checksum_algo }}:{{ hbase_jmx_exporter_checksum.content }}"

- name: "{{ hbase_task_prefix }} Template hbase-site.xml"
  template:
    src: "{{ hbase_template_hbase_site_xml }}"
    dest: "{{ hbase_path_config }}/hbase-site.xml"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Template hbase-env.sh"
  template:
    src: "{{ hbase_template_hbase_env_sh }}"
    dest: "{{ hbase_path_config }}/hbase-env.sh"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Link hadoop configs"
  file:
    state: link
    src: "{{ hbase_path_hadoop_config }}/{{ item }}"
    dest: "{{ hbase_path_config }}/{{ item }}"
  loop:
    - core-site.xml
    - hdfs-site.xml
    - yarn-site.xml
    - mapred-site.xml
    - hadoop-metrics2.properties

- name: "{{ hbase_task_prefix }} Template jmxremote.access"
  template:
    src: "{{ hbase_template_jmxremote_access }}"
    dest: "{{ hbase_path_config }}/jmxremote.access"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Template jmxremote.passwd"
  template:
    src: "{{ hbase_template_jmxremote_passwd }}"
    dest: "{{ hbase_path_config }}/jmxremote.passwd"
    owner: "{{ hbase_user }}"
    group: "{{ hbase_group }}"
    mode: '0600'

- name: "{{ hbase_task_prefix }} Template jmx_prometheus_javaagent.yaml"
  template:
    src: "{{ hbase_template_jmx_prometheus_javaagent }}"
    dest: "{{ hbase_path_config }}/jmx_prometheus_javaagent.yaml"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Create data directory"
  ansible.builtin.file:
    path: "{{ hbase_path_data }}"
    state: directory
    owner: "{{ hbase_user }}"
    group: "{{ hbase_group }}"
    mode: '0755' 

- name: "{{ hbase_task_prefix }} Create logs directory"
  ansible.builtin.file:
    path: "{{ hbase_path_logs }}"
    state: directory
    owner: "{{ hbase_user }}"
    group: "{{ hbase_group }}"
    mode: '0755'

- name: "{{ hbase_task_prefix }} Create native libs dir"
  ansible.builtin.file:
    path: "{{ hbase_path_install }}/lib/native"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "{{ hbase_task_prefix }} Link hadoop libs"
  ansible.builtin.file:
    state: link
    src: "{{ hbase_path_hadoop_install }}/lib/native/{{ item }}"
    dest: "{{ hbase_path_install }}/lib/native/{{ item }}"
  loop:
    - libhadoop.so
    - libhdfs.so

- name: "{{ hbase_task_prefix }} Install HBase Master service unit"
  template:
    src: "{{ hbase_template_master_service }}"
    dest: "{{ hadoop_path_systemd_master }}"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Start HBase Master service"
  systemd:
    name: "{{ hbase_systemd_master_name }}"
    enabled: "{{ hbase_systemd_master_enabled | bool }}"
    masked: "{{ hbase_systemd_master_masked | bool }}"
    daemon_reload: "{{ hbase_systemd_master_daemon_reload | bool }}"
    state: "{{ hbase_systemd_master_state }}"

- name: "{{ hbase_task_prefix }} Install HBase Region Server service unit"
  template:
    src: "{{ hbase_template_regionserver_service }}"
    dest: "{{ hadoop_path_systemd_regionserver }}"
    owner: root
    group: root
    mode: '0644'

- name: "{{ hbase_task_prefix }} Start HBase Resion Server service"
  systemd:
    name: "{{ hbase_systemd_regionserver_name }}"
    enabled: "{{ hbase_systemd_regionserver_enabled | bool }}"
    masked: "{{ hbase_systemd_regionserver_masked | bool }}"
    daemon_reload: "{{ hbase_systemd_regionserver_daemon_reload | bool }}"
    state: "{{ hbase_systemd_regionserver_state }}"
...
